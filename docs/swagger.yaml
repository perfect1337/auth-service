openapi: 3.0.0
info:
  title: Authentication Service API
  description: API for user authentication and authorization management
  version: 1.0.0
  contact:
    name: API Support
    email: support@auth-service.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication. Use the 'Bearer' prefix before the token.

  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: "john_doe"
          minLength: 3
          maxLength: 20
          description: "Unique username"
        email:
          type: string
          format: email
          example: "john@example.com"
          description: "Unique email address"
        password:
          type: string
          format: password
          example: "secret123"
          minLength: 6
          description: "User password"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          format: password
          example: "secret123"

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            username:
              type: string
              example: "john_doe"
            email:
              type: string
              example: "john@example.com"
            role:
              type: string
              example: "user"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "пользователь с таким email уже существует"
        code:
          type: string
          example: "user_already_exists"

    TokenValidationResponse:
      type: object
      properties:
        valid:
          type: boolean
          example: true
        error:
          type: string
          example: "Token has expired"

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation completed successfully"

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Creates a new user account in the system
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                emailExists:
                  value:
                    error: "пользователь с таким email уже существует"
                    code: "user_already_exists"
                usernameExists:
                  value:
                    error: "пользователь с таким username уже существует"
                    code: "user_already_exists"

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticates user and returns access and refresh tokens
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "неверные учетные данные"
                code: "invalid_credentials"

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh tokens
      description: Refreshes access and refresh tokens using refresh token from cookie
      operationId: refreshTokens
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Tokens successfully refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "недействительный refresh token"
                code: "invalid_refresh_token"

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidates refresh token and clears cookie
      operationId: logoutUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
              example:
                message: "Успешный выход из системы"
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/validate:
    get:
      tags:
        - Authentication
      summary: Validate token
      description: Validates JWT token
      operationId: validateToken
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
          description: JWT token to validate
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenValidationResponse'
        '400':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Требуется параметр token"
                code: "token_required"

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: Authentication and authorization operations
